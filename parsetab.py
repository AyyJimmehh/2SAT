
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CONJUNCTION DISJUNCTION IMPLICATION LPAREN NEGATION RPAREN VARexpression : expression CONJUNCTION expressionexpression : LPAREN expression RPARENexpression : clauseclause : literal IMPLICATION literalclause : literal DISJUNCTION literalclause : literalliteral : NEGATION literalliteral : VAR'
    
_lr_action_items = {'LPAREN':([0,2,7,],[2,2,2,]),'NEGATION':([0,2,5,7,9,10,],[5,5,5,5,5,5,]),'VAR':([0,2,5,7,9,10,],[6,6,6,6,6,6,]),'$end':([1,3,4,6,11,12,13,14,15,],[0,-3,-6,-8,-7,-1,-2,-4,-5,]),'CONJUNCTION':([1,3,4,6,8,11,12,13,14,15,],[7,-3,-6,-8,7,-7,7,-2,-4,-5,]),'RPAREN':([3,4,6,8,11,12,13,14,15,],[-3,-6,-8,13,-7,-1,-2,-4,-5,]),'IMPLICATION':([4,6,11,],[9,-8,-7,]),'DISJUNCTION':([4,6,11,],[10,-8,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,7,],[1,8,12,]),'clause':([0,2,7,],[3,3,3,]),'literal':([0,2,5,7,9,10,],[4,4,11,4,14,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression CONJUNCTION expression','expression',3,'p_expression_conjunction','boolean.py',33),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','boolean.py',38),
  ('expression -> clause','expression',1,'p_expression_clause','boolean.py',43),
  ('clause -> literal IMPLICATION literal','clause',3,'p_clause_implication','boolean.py',48),
  ('clause -> literal DISJUNCTION literal','clause',3,'p_clause_disjunction','boolean.py',56),
  ('clause -> literal','clause',1,'p_clause_unit','boolean.py',61),
  ('literal -> NEGATION literal','literal',2,'p_lit_negation','boolean.py',66),
  ('literal -> VAR','literal',1,'p_lit_var','boolean.py',71),
]
